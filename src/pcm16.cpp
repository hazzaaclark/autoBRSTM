/* Copyright (C) Harry Clark 2023 */

/* Automatic Mario Kart Wii BRSTM Creation */

/* THIS FILE PERTAINS TO THE API STRUCTURE OF THE AUDIO SCHEMA IMPLEMENTED */
/* INTO THIS PROJECT */

/* THIS FILE HANDLES THE PCM 16 CODEC OF AUDIO SPECIFICALLY */
/* WHICH HANDLES THE AUDIO SAMPLING USED ON THE WII */

/* NESTED INCLUDES */

#include "pcm16.h"

/* CREATE AN INSTANCE OF THE PCM ENCODER BY ALLOCATING THE TYPE RELATIVE */
/* TO THE OUTPUT */

/* DETERMINE THE LENGTH OF THE ARRAY OF THE CODEC */
/* GIVEN THIS, ENCODE THE CORRESPONDING LENGTH RELATIVE TO THE AUDIO */

static inline PCM_16* ENCODE_PCM(PCM_16* PCM, ENCODER* ENCODER, U16 OUTPUT, U8 ENCODE_COUNT)
{
	PCM += 1, sizeof(ENCODER->TYPE(OUTPUT));

	for (U32 E = 0; E < ENCODE_COUNT; E++)
	{
		ENCODE_COUNT = sizeof(PCM->ARRAY[E]);
		PCM->OUTPUT[E] += (U16)(PCM->ARRAY[E] + PCM_MAX + 1);
	}

	return ENCODER->TYPE(OUTPUT);
}

static inline PCM_16* DECODE_PCM(PCM_16* PCM, ENCODER* DECODER, U16 OUTPUT)
{
	for (U32 E = 0; E < PCM_CHANNELS; E++)
	{
		PCM->OUTPUT[E] += (U16)(PCM->ARRAY[E], 0);
	}

	return DECODER->TYPE(OUTPUT);
}
